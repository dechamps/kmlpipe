#!/bin/bash

source "${BASH_SOURCE%/*}/../lib/common.bash" || exit 1

input_zones_file=''
input_workplace_file=''
input_supermarkets_file=''
google_key=''
cache_directory=''
listing_type=''
price_max=''
max_listings_pages_per_zone=''
max_listings_per_page=''

kmlpipe_usage_define <<EOF
Runs the Edechamps Home Hunt Pipeline.

  --input-zones-file FILE (required)
    Zones to search for properties in.

  --input-workplace-file FILE (required)
    KML file describing the workplace (commute destination).

  --input-supermarkets-file FILE (required)
    KML file containing a list of supermarkets.

  --google-key KEY (required)
    Google API Key.

  --cache-directory DIR
    Reusable cache directory (e.g. for distance calculations).

  --listing-type TYPE
    Nestoria listing type (e.g. 'buy').

  --price-max PRICE
    Maximum property price.

  --max-listings-pages-per-zone PAGES
    Maximum number of Nestoria listings pages to fetch per zone.

  --max-listings-per-page LISTINGS
    Maximum number of Nestoria listings per page.

Example:

$ run --input-zones-file zones.kml --workplace-file workplace.kml \
	--listing-type buy --price-max 1000000 \
	--max-listings-pages-per-zone 1 --max-listings-per-page 5
EOF

while :
do
	if ! kmlpipe_args_pop argument
	then
		break
	fi
	case "$argument" in
		--input-zones-file) kmlpipe_args_pop_or_error input_zones_file;;
		--input-workplace-file) kmlpipe_args_pop_or_error input_workplace_file;;
		--input-supermarkets-file) kmlpipe_args_pop_or_error input_supermarkets_file;;
		--google-key) kmlpipe_args_pop_or_error google_key;;
		--cache-directory) kmlpipe_args_pop_or_error cache_directory;;
		--listing-type) kmlpipe_args_pop_or_error listing_type;;
		--price-max) kmlpipe_args_pop_or_error price_max;;
		--max-listings-pages-per-zone) kmlpipe_args_pop_or_error max_listings_pages_per_zone;;
		--max-listings-per-page) kmlpipe_args_pop_or_error max_listings_per_page;;
		--) break;;
		*) kmlpipe_usage_error;;
	esac
done
[[ -n "$input_zones_file" ]] || kmlpipe_usage_error
[[ -n "$input_workplace_file" ]] || kmlpipe_usage_error
[[ -n "$input_supermarkets_file" ]] || kmlpipe_usage_error
[[ -n "$google_key" ]] || kmlpipe_usage_error
kmlpipe_args_end

kmlpipe_create_tmpdir

search_listings_raw_args=()
search_listings_curl_args=()

if [[ -n "$listing_type" ]]
then
	search_listings_curl_args+=(--data "listing_type=$listing_type")
fi
if [[ -n "$price_max" ]]
then
	search_listings_curl_args+=(--data "price_max=$price_max")
fi
if [[ -n "$max_listings_pages_per_zone" ]]
then
	search_listings_raw_args+=(--max-pages "$max_listings_pages_per_zone")
fi
if [[ -n "$max_listings_per_page" ]]
then
	search_listings_curl_args+=(--data "number_of_results=$max_listings_per_page")
fi

current_file_index=0
advance_file() {
	current_file="$kmlpipe_tmpdir/$current_file_index.kml"
	current_file_index="$(( current_file_index + 1 ))"
	next_file="$kmlpipe_tmpdir/$current_file_index.kml"
}

# TODO: adjust Nestoria sorting parameters.
advance_file
"$kmlpipe_dir/nestoria/search-listings-zones" -- -- "${search_listings_raw_args[@]}" -- "${search_listings_curl_args[@]}" < "$input_zones_file" > "$next_file"

google_distance_cached() {
	local name="$1"
	shift
	if [[ -n "$cache_directory" ]]
	then
		local cache_directory="$cache_directory/google_distance_$name"
		if ! [[ -d "$cache_directory" ]]
		then
			mkdir "$cache_directory"
		fi
		"$kmlpipe_dir/google/distance" --cache-directory "$cache_directory" "$@"
	fi
	"$kmlpipe_dir/google/distance" "$@"

}

advance_file
"$kmlpipe_dir/util/merge-documents" -- "$current_file" "$input_workplace_file" "$input_supermarkets_file" |
kmlpipe_xmlstarlet tr "$kmlpipe_dir/util/link-folders.xsl" -s 'source-folder-name=Nestoria Listings' -s 'destination-folder-name=Workplace'  -s 'link-set-name=Workplace' |
kmlpipe_xmlstarlet tr "$kmlpipe_dir/util/link-folders.xsl" -s 'source-folder-name=Nestoria Listings' -s 'destination-folder-name=Supermarkets'  -s 'link-set-name=Supermarkets' > "$next_file"

# TODO: one issue with only considering the closest supermarket using great-circle distance is that it could reject supermarkets that are better in the walking distance metric (for example, if the "closest" supermarket happens to be on the other side of the Thames). Maybe we should consider the 3 closest supermarkets, for example.
advance_file
"$kmlpipe_dir/util/distance" --link-set-name 'Supermarkets' -- "$current_file" |
kmlpipe_xmlstarlet tr "$kmlpipe_dir/util/distance-sort.xsl" -s 'link-set-name=Supermarkets' |
kmlpipe_xmlstarlet tr "$kmlpipe_dir/util/link-truncate.xsl" -s 'link-set-name=Supermarkets' -s 'keep-first=1' > "$next_file"

# TODO: use a consistent transit time of day
advance_file
google_distance_cached workplace --link-set-name 'Workplace' --input-file "$current_file" -- \
	--data "key=$google_key" --data 'mode=transit' > "$next_file"

advance_file
google_distance_cached supermarket --link-set-name 'Supermarkets' --input-file "$current_file" -- \
	--data "key=$google_key" --data 'mode=walking' |
kmlpipe_output_xml

# TODO: deal with duplicate listings (either from Nestoria pagination inconsistencies, or from overlapping zones).
# TODO: implement a property scoring system.
# TODO: implement a property blacklisting mechanism.
# TODO: adjust the resulting KML for pretty presentation.
