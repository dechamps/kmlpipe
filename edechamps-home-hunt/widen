#!/bin/bash

source "${BASH_SOURCE%/*}/../lib/common.bash" || exit 1

input_listings_file=''
input_workplace_file=''
input_supermarkets_file=''
google_key=''
cache_directory=''

kmlpipe_usage_define <<EOF
Widens (annonates) a list of property listings with additional information
relevant to the Edechamps Home Hunt pipeline.

  --input-listings-file FILE (required)
    KML files containing the list of property listings.

  --input-workplace-file FILE (required)
    KML file describing the workplace (commute destination).

  --input-supermarkets-file FILE (required)
    KML file containing a list of supermarkets.

  --google-key KEY (required)
    Google API Key.

  --cache-directory DIR
    Reusable cache directory (e.g. for distance calculations).

Example:

$ widen --input-listings-file listings.kml \
	--input-workplace-file workplace.kml --input-supermarkets-file supermarkets.kml \
	--google-key MY_GOOGLE_API_KEY 
EOF

while :
do
	if ! kmlpipe_args_pop argument
	then
		break
	fi
	case "$argument" in
		--input-listings-file) kmlpipe_args_pop_or_error input_listings_file;;
		--input-workplace-file) kmlpipe_args_pop_or_error input_workplace_file;;
		--input-supermarkets-file) kmlpipe_args_pop_or_error input_supermarkets_file;;
		--google-key) kmlpipe_args_pop_or_error google_key;;
		--cache-directory) kmlpipe_args_pop_or_error cache_directory;;
		--) break;;
		*) kmlpipe_usage_error;;
	esac
done
[[ -n "$input_listings_file" ]] || kmlpipe_usage_error
[[ -n "$input_workplace_file" ]] || kmlpipe_usage_error
[[ -n "$input_supermarkets_file" ]] || kmlpipe_usage_error
[[ -n "$google_key" ]] || kmlpipe_usage_error
kmlpipe_args_end

kmlpipe_create_tmpdir

advance_stage() {
	input_file="$output_file"
	output_file="$kmlpipe_tmpdir/$1.kml"
}
output_file="$input_listings_file"

google_distance_cached() {
	local name="$1"
	shift
	if [[ -n "$cache_directory" ]]
	then
		local cache_directory="$cache_directory/google_distance_$name"
		if ! [[ -d "$cache_directory" ]]
		then
			mkdir "$cache_directory"
		fi
		"$kmlpipe_dir/google/distance" --cache-directory "$cache_directory" "$@"
	else
		"$kmlpipe_dir/google/distance" "$@"
	fi
}

advance_stage link-folders
"$kmlpipe_dir/util/merge-documents" -- "$input_file" "$input_workplace_file" "$input_supermarkets_file" |
kmlpipe_xmlstarlet tr "$kmlpipe_dir/util/link-folders.xsl" -s 'source-folder-name=Nestoria Listings' -s 'destination-folder-name=Workplace'  -s 'link-set-name=Workplace' |
kmlpipe_xmlstarlet tr "$kmlpipe_dir/util/link-folders.xsl" -s 'source-folder-name=Nestoria Listings' -s 'destination-folder-name=Supermarkets'  -s 'link-set-name=Supermarkets' > "$output_file"

# TODO: one issue with only considering the closest supermarket using great-circle distance is that it could reject supermarkets that are better in the walking distance metric (for example, if the "closest" supermarket happens to be on the other side of the Thames). Maybe we should consider the 3 closest supermarkets, for example.
advance_stage supermarkets-distance
"$kmlpipe_dir/util/distance" --link-set-name 'Supermarkets' -- "$input_file" |
kmlpipe_xmlstarlet tr "$kmlpipe_dir/util/distance-sort.xsl" -s 'link-set-name=Supermarkets' |
kmlpipe_xmlstarlet tr "$kmlpipe_dir/util/link-truncate.xsl" -s 'link-set-name=Supermarkets' -s 'keep-first=1' > "$output_file"

# TODO: use a consistent transit time of day
advance_stage workplace-transit
google_distance_cached workplace --link-set-name 'Workplace' --input-file "$input_file" -- \
	--data "key=$google_key" --data 'mode=transit' > "$output_file"

advance_stage supermarkets-walking
google_distance_cached supermarket --link-set-name 'Supermarkets' --input-file "$input_file" -- \
	--data "key=$google_key" --data 'mode=walking' |
kmlpipe_output_xml

# TODO: implement a property blacklisting mechanism.
# TODO: adjust the resulting KML for pretty presentation.
