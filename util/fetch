#!/bin/bash

source "${BASH_SOURCE%/*}/../lib/common.bash" || exit 1

kmlpipe_usage_define <<EOF
Fetches a URL using curl.

Recognizes the following environment variables, which are mostly useful for
testing:

  KMLPIPE_FETCH_REPLAY_DIR:
    If set, this command will try to find files named after a hash of the
    command line in the specified directory. If found, the corresponding output
    is returned instead of running curl. If not found, curl is run and its
    output is stored in this directory. Note that multiple invocations with the
    exact same command line will overwrite each other.

  KMLPIPE_FETCH_HERMETIC:
    If set, this command will refuse to run curl. The only way to make this
    command succeed in this mode is to provide a KMLPIPE_FETCH_REPLAY_DIR that
    contains files matching the command line.

Any parameters after -- are passed down to curl.
EOF

while :
do
        kmlpipe_args_pop_or_error argument
        case "$argument" in
                --) break;;
                *) kmlpipe_usage_error;;
        esac
done
additional_curl_args=("${kmlpipe_args_stack[@]}")
[[ "${#additional_curl_args[@]}" -gt 0 ]] || kmlpipe_usage_error

if [[ -n "${KMLPIPE_FETCH_REPLAY_DIR-}" ]]
then
	request_string="${additional_curl_args[@]@Q}"
	read -r request_hash dummy < <(echo "$request_string" | sha1sum)
	if [[ -z "$request_hash" ]]
	then
		kmlpipe_error "unable to compute request hash for: $request_string"
	fi
	request_string_file="$KMLPIPE_FETCH_REPLAY_DIR/$request_hash.cmdline"
	request_output_file="$KMLPIPE_FETCH_REPLAY_DIR/$request_hash.output"

	if ! [[ -e "$request_string_file" ]]
	then
		error_message="cannot find replay request file '$request_string_file' for: $request_string"
		if [[ -n "${KMLPIPE_FETCH_HERMETIC-}" ]]
		then
			kmlpipe_error "$error_message"
		else
			kmlpipe_info "$error_message"
		fi
	elif ! echo "$request_string" | cmp "$request_string_file"
	then
		kmlpipe_error "replay request file '$request_string_file' doesn't match request: $request_string"
	elif ! [[ -e "$request_output_file" ]]
	then
		kmlpipe_error "cannot find replay output file '$request_output_file' for: $request_string"
	else
		cat "$request_output_file"
		exit 0
	fi
fi

if [[ -n "${KMLPIPE_FETCH_HERMETIC-}" ]]
then
	kmlpipe_error "cannot fetch remotely in hermetic mode (did you mean to use KMLPIPE_FETCH_REPLAY_DIR?)"
fi

curl_command=(kmlpipe_cmd_verbose curl --user-agent 'kmlpipe')
if kmlpipe_debug_enabled
then
	curl_command+=(--verbose)
else
	curl_command+=(--silent --show-error)
fi
curl_command+=("${additional_curl_args[@]}")

if [[ -z "${KMLPIPE_FETCH_REPLAY_DIR-}" ]]
then
	"${curl_command[@]}"
else
	echo "$request_string" > "$request_string_file.new"
	"${curl_command[@]}" | tee --output-error=exit-nopipe -- "$request_output_file.new"
	mv "$request_output_file.new" "$request_output_file"
	mv "$request_string_file.new" "$request_string_file"
fi


